{"version":3,"sources":["webpack:///./src/app/core/http/authentication/authentication-http.service.ts","webpack:///./src/app/modules/authentication/authentication-routing.module.ts","webpack:///./src/app/modules/authentication/authentication.module.ts","webpack:///./src/app/modules/authentication/pages/login/login.component.html","webpack:///./src/app/modules/authentication/pages/login/login.component.scss","webpack:///./src/app/modules/authentication/pages/login/login.component.ts","webpack:///./src/app/modules/authentication/pages/signup/signup.component.html","webpack:///./src/app/modules/authentication/pages/signup/signup.component.scss","webpack:///./src/app/modules/authentication/pages/signup/signup.component.ts"],"names":[],"mappings":"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","file":"modules-authentication-authentication-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, timer, throwError, of } from 'rxjs';\n\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { SignupRequest } from '../../../shared/models/request/signup';\nimport { AuthResponse, AvailableUsernameResponse, AvailableEmailResponse, AuthenticatedUserResponse } from '../../../shared/models/response/auth-response';\nimport { LoginRequest } from '../../../shared/models/request/login';\n\n@Injectable()\nexport class AuthenticationHttpService {\n  endpoint: string = environment.apiUrl + '/auth';\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  checkAvailableEmail(mail: string): Observable<AvailableEmailResponse> {\n    return timer(1000)\n      .pipe(\n        switchMap(() => {\n          return this.http.get<AvailableEmailResponse>(`${this.endpoint}/user/email?email=${mail}`);\n        })\n      );\n  }\n\n  checkAvailableUsername(name: string): Observable<AvailableUsernameResponse> {\n    return timer(1000)\n      .pipe(\n        switchMap(() => {\n          return this.http.get<AvailableUsernameResponse>(`${this.endpoint}/user/username?name=${name}`);\n        })\n      );\n  }\n\n  signup(user: SignupRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.endpoint}/signup`, user);\n  }\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.endpoint}/login`, credentials)\n      .pipe(\n        catchError<any, any>(err => {\n          if (err.error) {\n            const error = err.error;\n\n            if (error.status === 404 || error.status === 401) {\n              return of(error);\n            }\n          }\n\n          return throwError(err);\n        })\n      );\n  }\n\n  getAuthentication(token: string): Observable<AuthenticatedUserResponse> {\n    return this.http.get<AuthenticatedUserResponse>(`${this.endpoint}/user`, {\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).pipe(\n      catchError<any, any>(err => {\n        if (err.error) {\n          const error = err.error;\n\n          if (error.status === 401) {\n            return of(error);\n          }\n        }\n\n        return throwError(err);\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './pages/login/login.component';\nimport { SignupComponent } from './pages/signup/signup.component';\n\nconst routes: Routes = [{\n  path: 'login',\n  component: LoginComponent\n}, {\n  path: 'signup',\n  component: SignupComponent\n}, {\n  path: '',\n  redirectTo: 'login',\n  pathMatch: 'full'\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthenticationRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\nimport { LoginComponent } from './pages/login/login.component';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AuthenticationHttpService } from '../../core/http/authentication/authentication-http.service';\n\n@NgModule({\n  declarations: [LoginComponent, SignupComponent],\n  imports: [\n    CommonModule,\n    AuthenticationRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    FontAwesomeModule,\n    SharedModule\n  ],\n  providers: [\n    AuthenticationHttpService\n  ]\n})\nexport class AuthenticationModule { }\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"authentication-container m-5\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-body\\\">\\n        <h2 class=\\\"card-title\\\">Iniciar sesión</h2>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12\\\">\\n            <div class=\\\"alert\\\" [ngClass]=\\\"{ 'alert-warning': formError.type === 'warning', 'alert-danger': formError.type === 'danger' }\\\" role=\\\"alert\\\" *ngIf=\\\"formError\\\">\\n              {{ formError.message }}\\n            </div>\\n          </div>\\n        </div>\\n\\n        <form class=\\\"row\\\" [formGroup]=\\\"loginForm\\\">\\n          <div class=\\\"form-group col-12\\\">\\n            <label for=\\\"loginEmail\\\">Correo Electrónico</label>\\n            <input\\n              type=\\\"email\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"loginEmail\\\"\\n              placeholder=\\\"Correo Electrónico\\\"\\n              [formControlName]=\\\"'email'\\\"\\n            />\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"loginForm.get('email').hasError('email')\\\"\\n            >\\n              Introduce un correo electronico válido.\\n            </small>\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                loginForm.get('email').hasError('required') && submittedForm\\n              \\\"\\n              >Este campo es requerido.</small\\n            >\\n          </div>\\n          <div class=\\\"form-group col-12 form-group-icon-field\\\">\\n            <label for=\\\"loginPasswordConfirm\\\">Contraseña</label>\\n            <app-password-preview>\\n              <span class=\\\"form-group-icon\\\" appPasswordPreview>\\n                <fa-icon icon=\\\"eye\\\"></fa-icon>\\n              </span>\\n              <input\\n                type=\\\"password\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"loginPasswordConfirm\\\"\\n                placeholder=\\\"Contraseña\\\"\\n                [formControlName]=\\\"'password'\\\"\\n                #input\\n              />\\n            </app-password-preview>\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                loginForm.get('password').hasError('required') &&\\n                submittedForm\\n              \\\"\\n            >\\n              Este campo es requerido.\\n            </small>\\n          </div>\\n          <div class=\\\"col-12 text-center pt-3\\\">\\n            <button class=\\\"btn btn-primary btn-block\\\" (click)=\\\"submit()\\\">Aceptar</button>\\n          </div>\\n        </form>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12 pt-3 text-right\\\">\\n            <a class=\\\"btn btn-info\\\" [routerLink]=\\\"['/signup']\\\">Registrarse</a>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aGVudGljYXRpb24vcGFnZXMvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthenticationHttpService } from '../../../../core/http/authentication/authentication-http.service';\nimport { AuthenticationService } from '../../../../core/authentication/authentication.service';\n\ninterface FormError {\n  type: 'warning' | 'danger',\n  message: string\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  formError: FormError = null;\n  loginForm: FormGroup;\n  submittedForm: boolean = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authHttpService: AuthenticationHttpService,\n    private authService: AuthenticationService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]]\n    });\n\n    this.loginForm.valueChanges\n      .subscribe(value => {\n        this.formError = null;\n        this.submittedForm = false;\n      });\n  }\n\n  submit(): void {\n    if (this.loginForm.invalid) {\n      this.formError = {\n        type: 'warning',\n        message: 'Hay errores en algunos campos'\n      }\n      return;\n    }\n\n    this.authHttpService.login(this.loginForm.value)\n      .subscribe(res => {\n        //console.log(res);\n        this.authService.setToken(res);\n\n        this.authHttpService.getAuthentication(res.token)\n          .subscribe(user => {\n            this.authService.setUser(user);\n            this.router.navigate(['/home']);\n          });\n      }, err => {\n        if (err.status) {\n          this.formError = {\n            type: 'danger',\n            message: 'Usuario y/o contraseña incorrectos'\n          }\n        }\n      });\n  }\n\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"authentication-container m-5\\\">\\n    <div class=\\\"card\\\">\\n      <div class=\\\"card-body\\\">\\n        <h2 class=\\\"card-title\\\">Registro</h2>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-12\\\">\\n            <div class=\\\"alert alert-warning\\\" role=\\\"alert\\\" *ngIf=\\\"formError\\\">\\n              {{ formError }}\\n            </div>\\n          </div>\\n        </div>\\n\\n        <form class=\\\"row\\\" [formGroup]=\\\"signupForm\\\">\\n          <div class=\\\"form-group col-12 form-group-icon-field\\\">\\n            <label for=\\\"loginEmail\\\">Correo Electrónico</label>\\n            <span class=\\\"form-group-icon\\\">\\n              <fa-icon\\n                icon=\\\"times\\\"\\n                class=\\\"text-danger\\\"\\n                *ngIf=\\\"signupForm.get('email').hasError('emailExists')\\\"\\n              ></fa-icon>\\n              <fa-icon\\n                icon=\\\"check\\\"\\n                class=\\\"text-success\\\"\\n                *ngIf=\\\"signupForm.get('email').status === 'VALID'\\\"\\n              ></fa-icon>\\n              <fa-icon\\n                icon=\\\"spinner\\\"\\n                class=\\\"text-info\\\"\\n                [spin]=\\\"true\\\"\\n                *ngIf=\\\"signupForm.get('email').status === 'PENDING'\\\"\\n              ></fa-icon>\\n            </span>\\n            <input\\n              type=\\\"email\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"loginEmail\\\"\\n              placeholder=\\\"Correo Electrónico\\\"\\n              [formControlName]=\\\"'email'\\\"\\n            />\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"signupForm.get('email').hasError('email')\\\"\\n            >\\n              Introduce un correo electronico válido.\\n            </small>\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                signupForm.get('email').hasError('required') && submittedForm\\n              \\\"\\n              >Este campo es requerido.</small\\n            >\\n          </div>\\n          <div class=\\\"form-group col-12 form-group-icon-field\\\">\\n            <label for=\\\"loginUsername\\\">Nombre de usuario</label>\\n            <span class=\\\"form-group-icon\\\">\\n              <fa-icon\\n                icon=\\\"times\\\"\\n                class=\\\"text-danger\\\"\\n                *ngIf=\\\"signupForm.get('username').hasError('usernameExists')\\\"\\n              ></fa-icon>\\n              <fa-icon\\n                icon=\\\"check\\\"\\n                class=\\\"text-success\\\"\\n                *ngIf=\\\"signupForm.get('username').status === 'VALID'\\\"\\n              ></fa-icon>\\n              <fa-icon\\n                icon=\\\"spinner\\\"\\n                class=\\\"text-info\\\"\\n                [spin]=\\\"true\\\"\\n                *ngIf=\\\"signupForm.get('username').status === 'PENDING'\\\"\\n              ></fa-icon>\\n            </span>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"loginUsername\\\"\\n              placeholder=\\\"Nombre de usuario\\\"\\n              [formControlName]=\\\"'username'\\\"\\n            />\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                signupForm.get('username').hasError('required') && submittedForm\\n              \\\"\\n            >\\n              Este campo es requerido.\\n            </small>\\n          </div>\\n          <div class=\\\"form-group col-12\\\">\\n            <label for=\\\"loginFirstName\\\">Nombre(s)</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"loginFirstName\\\"\\n              placeholder=\\\"Nombre(s)\\\"\\n              [formControlName]=\\\"'firstName'\\\"\\n            />\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                signupForm.get('firstName').hasError('required') &&\\n                submittedForm\\n              \\\"\\n            >\\n              Este campo es requerido.\\n            </small>\\n          </div>\\n          <div class=\\\"form-group col-12 col-md-6\\\">\\n            <label for=\\\"loginLastName\\\">Apellido paterno</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"loginLastName\\\"\\n              placeholder=\\\"Apellido paterno\\\"\\n              [formControlName]=\\\"'lastName'\\\"\\n            />\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                signupForm.get('lastName').hasError('required') && submittedForm\\n              \\\"\\n            >\\n              Este campo es requerido.\\n            </small>\\n          </div>\\n          <div class=\\\"form-group col-12 col-md-6\\\">\\n            <label for=\\\"loginSecondLastName\\\">Apellido materno</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"loginSecondLastName\\\"\\n              placeholder=\\\"Apellido materno\\\"\\n              [formControlName]=\\\"'secondLastName'\\\"\\n            />\\n            <small\\n              class=\\\"form-text text-danger\\\"\\n              *ngIf=\\\"\\n                signupForm.get('secondLastName').hasError('required') &&\\n                submittedForm\\n              \\\"\\n            >\\n              Este campo es requerido.\\n            </small>\\n          </div>\\n          <ng-container [formGroupName]=\\\"'passwords'\\\">\\n            <div class=\\\"form-group col-12 form-group-icon-field\\\">\\n              <span class=\\\"form-group-icon\\\">\\n                <fa-icon\\n                  [icon]=\\\"passwordsPreviews.psw ? 'eye' : 'eye-slash'\\\"\\n                  (click)=\\\"toggleField('psw')\\\"\\n                ></fa-icon>\\n              </span>\\n              <label for=\\\"loginPassword\\\">Contraseña</label>\\n              <input\\n                [type]=\\\"passwordsPreviews.psw ? 'password' : 'text'\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"loginPassword\\\"\\n                placeholder=\\\"Contraseña\\\"\\n                [formControlName]=\\\"'password'\\\"\\n              />\\n              <small\\n                class=\\\"form-text text-danger\\\"\\n                *ngIf=\\\"\\n                  signupForm.get('passwords.password').hasError('required') &&\\n                  submittedForm\\n                \\\"\\n              >\\n                Este campo es requerido.\\n              </small>\\n            </div>\\n            <div class=\\\"form-group col-12 form-group-icon-field\\\">\\n              <label for=\\\"loginPasswordConfirm\\\">Confirmar Contraseña</label>\\n              <app-password-preview>\\n                <span class=\\\"form-group-icon\\\" appPasswordPreview>\\n                  <fa-icon icon=\\\"eye\\\"></fa-icon>\\n                </span>\\n                <input\\n                  type=\\\"password\\\"\\n                  class=\\\"form-control\\\"\\n                  id=\\\"loginPasswordConfirm\\\"\\n                  placeholder=\\\"Confirmar Contraseña\\\"\\n                  [formControlName]=\\\"'confirm'\\\"\\n                  #input\\n                />\\n              </app-password-preview>\\n\\n              <small\\n                class=\\\"form-text text-danger\\\"\\n                *ngIf=\\\"\\n                  signupForm.get('passwords.confirm').hasError('required') &&\\n                  submittedForm\\n                \\\"\\n              >\\n                Este campo es requerido.\\n              </small>\\n              <small\\n                class=\\\"form-text text-danger\\\"\\n                *ngIf=\\\"signupForm.get('passwords').hasError('notSame')\\\"\\n              >\\n                Las contraseñas no coinciden\\n              </small>\\n            </div>\\n          </ng-container>\\n\\n          <div class=\\\"col-12 text-center pt-3\\\">\\n            <button class=\\\"btn btn-primary\\\" (click)=\\\"submit()\\\">Aceptar</button>\\n          </div>\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aGVudGljYXRpb24vcGFnZXMvc2lnbnVwL3NpZ251cC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AsyncValidatorFn, AbstractControl } from '@angular/forms';\n\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AuthenticationHttpService } from '../../../../core/http/authentication/authentication-http.service';\nimport { AuthenticationService } from '../../../../core/authentication/authentication.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent implements OnInit {\n  signupForm: FormGroup;\n  formError: string = '';\n  submittedForm: boolean = false;\n  passwordsPreviews = {\n    psw: true,\n    confirm: true\n  }\n\n  constructor(\n    private fb: FormBuilder,\n    private authHttpService: AuthenticationHttpService,\n    private authService: AuthenticationService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  buildForm(): void {\n    this.signupForm = this.fb.group({\n      email: ['', [Validators.email, Validators.required], this.checkAvailableEmail()],\n      username: ['', [Validators.required], this.checkAvailableUsername()],\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      secondLastName: ['', [Validators.required]],\n      passwords: this.fb.group({\n        password: ['', [Validators.required]],\n        confirm: ['', [Validators.required]]\n      }, {\n          validator: (group: FormGroup) => {\n            let psw = group.get('password').value;\n            let confirm = group.get('confirm').value;\n\n            return psw === confirm ? null : { notSame: true };\n          }\n        })\n    })\n\n    this.signupForm.valueChanges\n      .subscribe(value => {\n        this.formError = '';\n        this.submittedForm = false;\n      })\n  }\n\n  submit(): void {\n    this.submittedForm = true;\n\n    if (this.signupForm.invalid) {\n      this.formError = 'Hay errores en algunos campos';\n      return;\n    }\n\n    const user: any = Object.assign({}, this.signupForm.value);\n\n    user.password = user.passwords.password;\n    delete user.passwords;\n\n    this.authHttpService.signup(user)\n      .subscribe(res => {\n        this.authService.setToken(res);\n\n        this.authHttpService.getAuthentication(res.token)\n          .subscribe(user => {\n            this.authService.setUser(user);\n            this.router.navigate(['/home']);\n          });\n      }, err => {\n        console.log(err);\n        this.formError = 'Hubo un error';\n      });\n\n  }\n\n  toggleField(key: string): void {\n    this.passwordsPreviews[key] = !this.passwordsPreviews[key];\n  }\n\n  checkAvailableEmail(): AsyncValidatorFn {\n    return (control: AbstractControl) => {\n      return this.authHttpService.checkAvailableEmail(control.value)\n        .pipe(\n          map(res => {\n            return res.email ? { emailExists: true } : null;\n          })\n        )\n    }\n  }\n\n  checkAvailableUsername(): AsyncValidatorFn {\n    return (control: AbstractControl) => {\n      return this.authHttpService.checkAvailableUsername(control.value)\n        .pipe(\n          map(res => {\n            return res.username ? { usernameExists: true } : null;\n          })\n        )\n    }\n  }\n\n}\n"],"sourceRoot":""}